// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: views.sql

package sqlite

import (
	"github.com/Bodo-inc/denali/models"

	"context"
)

const createView = `-- name: CreateView :one
INSERT INTO objects (name, type, namespace_pk, metadata_location) 
    VALUES (?1, 'VIEW', ?2, ?3) RETURNING pk
`
const dropView = `-- name: DropView :execrows
DELETE FROM objects WHERE pk = ?1 AND type = 'VIEW'
`
const getViewHelper = `-- name: GetViewHelper :one
SELECT pk, metadata_location FROM objects
    WHERE type = 'VIEW' AND name = ?1 AND namespace_pk = ?2
`
const listViews = `-- name: ListViews :many
SELECT name FROM objects WHERE type = 'VIEW' AND namespace_pk = ?1
`
const renameAndMoveView = `-- name: RenameAndMoveView :execrows
UPDATE objects SET name = ?1, namespace_pk = ?2
    WHERE pk = ?3 AND type = 'VIEW'
`
const renameView = `-- name: RenameView :execrows
UPDATE objects SET name = ?1
    WHERE pk = ?2 AND type = 'VIEW'
`
const updateView = `-- name: UpdateView :execrows
UPDATE objects SET metadata_location = ?1
    WHERE pk = ?2 AND type = 'VIEW'
`

var _ models.Querier = (*Queries)(nil)

func (q *Queries) CreateView(ctx context.Context, name string, nsPk int64, metadataLoc string) (int64, error) {
	row := q.queryRow(ctx, q.createViewStmt, createView, name, nsPk, metadataLoc)
	var pk int64
	err := row.Scan(&pk)
	return pk, err
}

func (q *Queries) DropView(ctx context.Context, pk int64) (int64, error) {
	result, err := q.exec(ctx, q.dropViewStmt, dropView, pk)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (q *Queries) GetViewHelper(ctx context.Context, name string, nsPk int64) (models.GetViewHelperRow, error) {
	row := q.queryRow(ctx, q.getViewHelperStmt, getViewHelper, name, nsPk)
	var i models.GetViewHelperRow
	err := row.Scan(&i.Pk, &i.MetadataLocation)
	return i, err
}

func (q *Queries) ListViews(ctx context.Context, nspk int64) ([]string, error) {
	rows, err := q.query(ctx, q.listViewsStmt, listViews, nspk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *Queries) RenameAndMoveView(ctx context.Context, name string, nsPk int64, pk int64) (int64, error) {
	result, err := q.exec(ctx, q.renameAndMoveViewStmt, renameAndMoveView, name, nsPk, pk)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (q *Queries) RenameView(ctx context.Context, name string, pk int64) (int64, error) {
	result, err := q.exec(ctx, q.renameViewStmt, renameView, name, pk)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (q *Queries) UpdateView(ctx context.Context, metadataLoc string, pk int64) (int64, error) {
	result, err := q.exec(ctx, q.updateViewStmt, updateView, metadataLoc, pk)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
