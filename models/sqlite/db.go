// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlite

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/Bodo-inc/denali/models"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createNamespaceStmt, err = db.PrepareContext(ctx, createNamespace); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNamespace: %w", err)
	}
	if q.createNamespacePropertyStmt, err = db.PrepareContext(ctx, createNamespaceProperty); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNamespaceProperty: %w", err)
	}
	if q.createViewStmt, err = db.PrepareContext(ctx, createView); err != nil {
		return nil, fmt.Errorf("error preparing query CreateView: %w", err)
	}
	if q.deleteNamespacePropertyStmt, err = db.PrepareContext(ctx, deleteNamespaceProperty); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNamespaceProperty: %w", err)
	}
	if q.dropNamespaceStmt, err = db.PrepareContext(ctx, dropNamespace); err != nil {
		return nil, fmt.Errorf("error preparing query DropNamespace: %w", err)
	}
	if q.dropTableStmt, err = db.PrepareContext(ctx, dropTable); err != nil {
		return nil, fmt.Errorf("error preparing query DropTable: %w", err)
	}
	if q.dropViewStmt, err = db.PrepareContext(ctx, dropView); err != nil {
		return nil, fmt.Errorf("error preparing query DropView: %w", err)
	}
	if q.getChildNamespaceNamesStmt, err = db.PrepareContext(ctx, getChildNamespaceNames); err != nil {
		return nil, fmt.Errorf("error preparing query GetChildNamespaceNames: %w", err)
	}
	if q.getNamespacePKHelperStmt, err = db.PrepareContext(ctx, getNamespacePKHelper); err != nil {
		return nil, fmt.Errorf("error preparing query GetNamespacePKHelper: %w", err)
	}
	if q.getNamespacePropertiesStmt, err = db.PrepareContext(ctx, getNamespaceProperties); err != nil {
		return nil, fmt.Errorf("error preparing query GetNamespaceProperties: %w", err)
	}
	if q.getTableHelperStmt, err = db.PrepareContext(ctx, getTableHelper); err != nil {
		return nil, fmt.Errorf("error preparing query GetTableHelper: %w", err)
	}
	if q.getViewHelperStmt, err = db.PrepareContext(ctx, getViewHelper); err != nil {
		return nil, fmt.Errorf("error preparing query GetViewHelper: %w", err)
	}
	if q.listTablesStmt, err = db.PrepareContext(ctx, listTables); err != nil {
		return nil, fmt.Errorf("error preparing query ListTables: %w", err)
	}
	if q.listViewsStmt, err = db.PrepareContext(ctx, listViews); err != nil {
		return nil, fmt.Errorf("error preparing query ListViews: %w", err)
	}
	if q.registerTableStmt, err = db.PrepareContext(ctx, registerTable); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterTable: %w", err)
	}
	if q.renameAndMoveTableStmt, err = db.PrepareContext(ctx, renameAndMoveTable); err != nil {
		return nil, fmt.Errorf("error preparing query RenameAndMoveTable: %w", err)
	}
	if q.renameAndMoveViewStmt, err = db.PrepareContext(ctx, renameAndMoveView); err != nil {
		return nil, fmt.Errorf("error preparing query RenameAndMoveView: %w", err)
	}
	if q.renameTableStmt, err = db.PrepareContext(ctx, renameTable); err != nil {
		return nil, fmt.Errorf("error preparing query RenameTable: %w", err)
	}
	if q.renameViewStmt, err = db.PrepareContext(ctx, renameView); err != nil {
		return nil, fmt.Errorf("error preparing query RenameView: %w", err)
	}
	if q.updateNamespacePropertyStmt, err = db.PrepareContext(ctx, updateNamespaceProperty); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNamespaceProperty: %w", err)
	}
	if q.updateTableStmt, err = db.PrepareContext(ctx, updateTable); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTable: %w", err)
	}
	if q.updateViewStmt, err = db.PrepareContext(ctx, updateView); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateView: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createNamespaceStmt != nil {
		if cerr := q.createNamespaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNamespaceStmt: %w", cerr)
		}
	}
	if q.createNamespacePropertyStmt != nil {
		if cerr := q.createNamespacePropertyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNamespacePropertyStmt: %w", cerr)
		}
	}
	if q.createViewStmt != nil {
		if cerr := q.createViewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createViewStmt: %w", cerr)
		}
	}
	if q.deleteNamespacePropertyStmt != nil {
		if cerr := q.deleteNamespacePropertyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNamespacePropertyStmt: %w", cerr)
		}
	}
	if q.dropNamespaceStmt != nil {
		if cerr := q.dropNamespaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dropNamespaceStmt: %w", cerr)
		}
	}
	if q.dropTableStmt != nil {
		if cerr := q.dropTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dropTableStmt: %w", cerr)
		}
	}
	if q.dropViewStmt != nil {
		if cerr := q.dropViewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dropViewStmt: %w", cerr)
		}
	}
	if q.getChildNamespaceNamesStmt != nil {
		if cerr := q.getChildNamespaceNamesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChildNamespaceNamesStmt: %w", cerr)
		}
	}
	if q.getNamespacePKHelperStmt != nil {
		if cerr := q.getNamespacePKHelperStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNamespacePKHelperStmt: %w", cerr)
		}
	}
	if q.getNamespacePropertiesStmt != nil {
		if cerr := q.getNamespacePropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNamespacePropertiesStmt: %w", cerr)
		}
	}
	if q.getTableHelperStmt != nil {
		if cerr := q.getTableHelperStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTableHelperStmt: %w", cerr)
		}
	}
	if q.getViewHelperStmt != nil {
		if cerr := q.getViewHelperStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getViewHelperStmt: %w", cerr)
		}
	}
	if q.listTablesStmt != nil {
		if cerr := q.listTablesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTablesStmt: %w", cerr)
		}
	}
	if q.listViewsStmt != nil {
		if cerr := q.listViewsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listViewsStmt: %w", cerr)
		}
	}
	if q.registerTableStmt != nil {
		if cerr := q.registerTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerTableStmt: %w", cerr)
		}
	}
	if q.renameAndMoveTableStmt != nil {
		if cerr := q.renameAndMoveTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing renameAndMoveTableStmt: %w", cerr)
		}
	}
	if q.renameAndMoveViewStmt != nil {
		if cerr := q.renameAndMoveViewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing renameAndMoveViewStmt: %w", cerr)
		}
	}
	if q.renameTableStmt != nil {
		if cerr := q.renameTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing renameTableStmt: %w", cerr)
		}
	}
	if q.renameViewStmt != nil {
		if cerr := q.renameViewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing renameViewStmt: %w", cerr)
		}
	}
	if q.updateNamespacePropertyStmt != nil {
		if cerr := q.updateNamespacePropertyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNamespacePropertyStmt: %w", cerr)
		}
	}
	if q.updateTableStmt != nil {
		if cerr := q.updateTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTableStmt: %w", cerr)
		}
	}
	if q.updateViewStmt != nil {
		if cerr := q.updateViewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateViewStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	createNamespaceStmt         *sql.Stmt
	createNamespacePropertyStmt *sql.Stmt
	createViewStmt              *sql.Stmt
	deleteNamespacePropertyStmt *sql.Stmt
	dropNamespaceStmt           *sql.Stmt
	dropTableStmt               *sql.Stmt
	dropViewStmt                *sql.Stmt
	getChildNamespaceNamesStmt  *sql.Stmt
	getNamespacePKHelperStmt    *sql.Stmt
	getNamespacePropertiesStmt  *sql.Stmt
	getTableHelperStmt          *sql.Stmt
	getViewHelperStmt           *sql.Stmt
	listTablesStmt              *sql.Stmt
	listViewsStmt               *sql.Stmt
	registerTableStmt           *sql.Stmt
	renameAndMoveTableStmt      *sql.Stmt
	renameAndMoveViewStmt       *sql.Stmt
	renameTableStmt             *sql.Stmt
	renameViewStmt              *sql.Stmt
	updateNamespacePropertyStmt *sql.Stmt
	updateTableStmt             *sql.Stmt
	updateViewStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) models.Querier {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		createNamespaceStmt:         q.createNamespaceStmt,
		createNamespacePropertyStmt: q.createNamespacePropertyStmt,
		createViewStmt:              q.createViewStmt,
		deleteNamespacePropertyStmt: q.deleteNamespacePropertyStmt,
		dropNamespaceStmt:           q.dropNamespaceStmt,
		dropTableStmt:               q.dropTableStmt,
		dropViewStmt:                q.dropViewStmt,
		getChildNamespaceNamesStmt:  q.getChildNamespaceNamesStmt,
		getNamespacePKHelperStmt:    q.getNamespacePKHelperStmt,
		getNamespacePropertiesStmt:  q.getNamespacePropertiesStmt,
		getTableHelperStmt:          q.getTableHelperStmt,
		getViewHelperStmt:           q.getViewHelperStmt,
		listTablesStmt:              q.listTablesStmt,
		listViewsStmt:               q.listViewsStmt,
		registerTableStmt:           q.registerTableStmt,
		renameAndMoveTableStmt:      q.renameAndMoveTableStmt,
		renameAndMoveViewStmt:       q.renameAndMoveViewStmt,
		renameTableStmt:             q.renameTableStmt,
		renameViewStmt:              q.renameViewStmt,
		updateNamespacePropertyStmt: q.updateNamespacePropertyStmt,
		updateTableStmt:             q.updateTableStmt,
		updateViewStmt:              q.updateViewStmt,
	}
}
