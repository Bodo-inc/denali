// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ns.sql

package sqlite

import (
	"github.com/Bodo-inc/denali/models"

	"context"
	"database/sql"
)

const createNamespace = `-- name: CreateNamespace :one
INSERT INTO namespaces (name, parent_pk, parent_path) VALUES (?1, ?2, ?3) RETURNING pk
`
const createNamespaceProperty = `-- name: CreateNamespaceProperty :exec
INSERT INTO namespace_properties (namespace_pk, key, value) VALUES (?1, ?2, ?3)
`
const deleteNamespaceProperty = `-- name: DeleteNamespaceProperty :execrows
DELETE FROM namespace_properties WHERE namespace_pk = ?1 AND key = ?2
`
const

// Delete Namespace Property by Key

dropNamespace = `-- name: DropNamespace :execrows
DELETE FROM namespaces WHERE name = ?1 AND parent_path = ?2
`
const

// Delete Namespace (Cascade Deletes Properties)

getChildNamespaceNames = `-- name: GetChildNamespaceNames :many
SELECT name FROM namespaces WHERE parent_path = ?1
`
const

// Get Child Namespace Names

getNamespacePKHelper = `-- name: GetNamespacePKHelper :one

SELECT pk FROM namespaces WHERE parent_path = ?1 AND name = ?2
`
const

// Note: IS NOT DISTINCT FROM is a null-safe equality operator
// Equivalent to (col = val OR (col IS NULL AND val IS NULL))
// Get Namespace PK from Path

getNamespaceProperties = `-- name: GetNamespaceProperties :many
SELECT key, value FROM namespace_properties WHERE namespace_pk = ?1
`
const updateNamespaceProperty = `-- name: UpdateNamespaceProperty :execrows
INSERT INTO namespace_properties (namespace_pk, key, value)
VALUES (?1, ?2, ?3)
ON CONFLICT (namespace_pk, key)
DO UPDATE SET value = ?3
`

var

// Update Namespace Property by Key
_ models.Querier = (*Queries)(nil)

func (q *Queries) CreateNamespace(ctx context.Context, name string, parentPk sql.NullInt64, parentPath string) (int64, error) {
	row := q.queryRow(ctx, q.createNamespaceStmt, createNamespace, name, parentPk, parentPath)
	var pk int64
	err := row.Scan(&pk)
	return pk, err
}

func (q *Queries) CreateNamespaceProperty(ctx context.Context, nsPk int64, key string, value string) error {
	_, err := q.exec(ctx, q.createNamespacePropertyStmt, createNamespaceProperty, nsPk, key, value)
	return err
}

func (q *Queries) DeleteNamespaceProperty(ctx context.Context, nsPk int64, key string) (int64, error) {
	result, err := q.exec(ctx, q.deleteNamespacePropertyStmt, deleteNamespaceProperty, nsPk, key)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (q *Queries) DropNamespace(ctx context.Context, name string, parentPath string) (int64, error) {
	result, err := q.exec(ctx, q.dropNamespaceStmt, dropNamespace, name, parentPath)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (q *Queries) GetChildNamespaceNames(ctx context.Context, nspath string) ([]string, error) {
	rows, err := q.query(ctx, q.getChildNamespaceNamesStmt, getChildNamespaceNames, nspath)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *Queries) GetNamespacePKHelper(ctx context.Context, parentPath string, name string) (int64, error) {
	row := q.queryRow(ctx, q.getNamespacePKHelperStmt, getNamespacePKHelper, parentPath, name)
	var pk int64
	err := row.Scan(&pk)
	return pk, err
}

func (q *Queries) GetNamespaceProperties(ctx context.Context, nspk int64) ([]models.GetNamespacePropertiesRow, error) {
	rows, err := q.query(ctx, q.getNamespacePropertiesStmt, getNamespaceProperties, nspk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.GetNamespacePropertiesRow
	for rows.Next() {
		var i models.GetNamespacePropertiesRow
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *Queries) UpdateNamespaceProperty(ctx context.Context, nsPk int64, key string, value string) (int64, error) {
	result, err := q.exec(ctx, q.updateNamespacePropertyStmt, updateNamespaceProperty, nsPk, key, value)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
