// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tables.sql

package sqlite

import (
	"github.com/Bodo-inc/denali/models"

	"context"
)

const dropTable = `-- name: DropTable :execrows
DELETE FROM objects WHERE pk = ?1 AND type = 'TABLE'
`
const getTableHelper = `-- name: GetTableHelper :one
SELECT pk, last_sequence_number, metadata_location FROM objects
WHERE type = 'TABLE' AND name = ?1 AND namespace_pk = ?2
`
const listTables = `-- name: ListTables :many
SELECT name FROM objects WHERE type = 'TABLE' AND namespace_pk = ?1
`
const registerTable = `-- name: RegisterTable :exec
INSERT INTO objects (name, type, namespace_pk, metadata_location, last_sequence_number) 
    VALUES (?1, 'TABLE', ?2, ?3, ?4)
`
const renameAndMoveTable = `-- name: RenameAndMoveTable :execrows
UPDATE objects SET name = ?1, namespace_pk = ?2
    WHERE pk = ?3 AND type = 'TABLE'
`
const renameTable = `-- name: RenameTable :execrows
UPDATE objects SET name = ?1 WHERE pk = ?2 AND type = 'TABLE'
`
const updateTable = `-- name: UpdateTable :execrows
UPDATE objects 
    SET metadata_location = ?1, last_sequence_number = last_sequence_number + 1
    WHERE pk = ?2 AND last_sequence_number = ?3 AND type = 'TABLE'
`

var _ models.Querier = (*Queries)(nil)

func (q *Queries) DropTable(ctx context.Context, pk int64) (int64, error) {
	result, err := q.exec(ctx, q.dropTableStmt, dropTable, pk)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (q *Queries) GetTableHelper(ctx context.Context, name string, nsPk int64) (models.GetTableHelperRow, error) {
	row := q.queryRow(ctx, q.getTableHelperStmt, getTableHelper, name, nsPk)
	var i models.GetTableHelperRow
	err := row.Scan(&i.Pk, &i.LastSequenceNumber, &i.MetadataLocation)
	return i, err
}

func (q *Queries) ListTables(ctx context.Context, nspk int64) ([]string, error) {
	rows, err := q.query(ctx, q.listTablesStmt, listTables, nspk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *Queries) RegisterTable(ctx context.Context, name string, nsPk int64, metadataLoc string, lastSeq int64) error {
	_, err := q.exec(ctx, q.registerTableStmt, registerTable,
		name,
		nsPk,
		metadataLoc,
		lastSeq,
	)
	return err
}

func (q *Queries) RenameAndMoveTable(ctx context.Context, name string, nsPk int64, pk int64) (int64, error) {
	result, err := q.exec(ctx, q.renameAndMoveTableStmt, renameAndMoveTable, name, nsPk, pk)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (q *Queries) RenameTable(ctx context.Context, name string, pk int64) (int64, error) {
	result, err := q.exec(ctx, q.renameTableStmt, renameTable, name, pk)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (q *Queries) UpdateTable(ctx context.Context, metadataLoc string, pk int64, lastSeq int64) (int64, error) {
	result, err := q.exec(ctx, q.updateTableStmt, updateTable, metadataLoc, pk, lastSeq)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
