// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package models

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type ObjectType string

const (
	ObjectTypeTABLE ObjectType = "TABLE"
	ObjectTypeVIEW  ObjectType = "VIEW"
)

func (e *ObjectType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ObjectType(s)
	case string:
		*e = ObjectType(s)
	default:
		return fmt.Errorf("unsupported scan type for ObjectType: %T", src)
	}
	return nil
}

type NullObjectType struct {
	ObjectType ObjectType
	Valid      bool // Valid is true if ObjectType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullObjectType) Scan(value interface{}) error {
	if value == nil {
		ns.ObjectType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ObjectType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullObjectType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ObjectType), nil
}

type Namespace struct {
	Pk         int64
	Name       string
	ParentPk   sql.NullInt64
	ParentPath string
}

type NamespaceProperty struct {
	Key         string
	Value       string
	NamespacePk int64
}

type Object struct {
	Pk                 int64
	Name               string
	Type               ObjectType
	NamespacePk        int64
	LastSequenceNumber int64
	MetadataLocation   string
}
